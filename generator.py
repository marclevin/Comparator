import logging
import os
from typing import Tuple

from dotenv import load_dotenv
from openai import OpenAI

from compare import validate_student_attempts

teacher_attempt_count = 0
max_teacher_attempts = 3
best_scoring_hint = ""
best_score = 0.0


def generate_ai_hint(problem_description: str, student_code: str, edit: str, goal_code: str) -> str:
    load_dotenv()
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    if client is None:
        raise Exception("OpenAI client not initialized.")
    return internal_generate_ai_hint(problem_description, student_code, edit, goal_code, client)


def internal_generate_ai_hint(problem_description: str, student_code: str, edit: str, goal_code: str,
                              client: OpenAI) -> str:
    global teacher_attempt_count
    global max_teacher_attempts
    global best_scoring_hint
    global best_score
    if teacher_attempt_count > max_teacher_attempts:
        return best_scoring_hint
    teacher_attempt_count += 1
    filled_template = populate_teacher_template(problem_description, student_code, edit)
    teacher_interaction = client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.2,
        messages=[
            {"role": "system", "content": f"{teacher_fine_tune}"},
            {"role": "user", "content": f"{filled_template}"},
        ],
    )
    hints = extract_hints(teacher_interaction.choices[0].message.content)
    if hints is None:
        raise Exception("No hints were generated by the AI.")
    long_form_hint, short_form_hint = hints
    # Log the hints
    logging.log(logging.INFO, f"Long-form hint: {long_form_hint}")
    logging.log(logging.INFO, f"Short-form hint: {short_form_hint}")

    filled_student_template = populate_student_template(long_form_hint, student_code)
    completions = []
    for _ in range(10):
        completion_student = client.chat.completions.create(
            model="gpt-3.5-turbo",
            temperature=0.3,
            messages=[
                {"role": "system", "content": f"{student_fine_tune}"},
                {"role": "user", "content": f"{filled_student_template}"},
            ],
        )
        completions.append(completion_student.choices[0].message.content)
    # Write the completions to a file.
    with open("completions.txt", "w") as f:
        for completion in completions:
            f.write(f"{completion}\n")
    # Now to compare the completions to the goal code.
    average_score = validate_student_attempts(completions, goal_code, student_code)
    # We want a solution that is at least 85% similar to the goal code.
    if best_score < average_score:
        best_score = average_score
        best_scoring_hint = short_form_hint
    if average_score < 0.85:
        # We will handle the recursive attempt here.
        return internal_generate_ai_hint(problem_description, student_code, edit, goal_code, client)
    return short_form_hint


def populate_teacher_template(problem_description, student_code, edit):
    global teacher_template
    filled_template = teacher_template.format(
        problem_description=problem_description,
        student_code=student_code,
        edit=edit,
    )
    return filled_template


def populate_student_template(long_form_hint, student_code):
    global student_template
    filled_student_template = student_template.format(
        student_code=student_code,
        long_form_hint=long_form_hint,
    )
    return filled_student_template


def extract_hints(response: str) -> Tuple[str, str]:
    # Find the start of the long-form hint
    start_index = response.find("Long-form hint:") + len("Long-form hint:")

    # Find the start of the short-form hint (which marks the end of the long-form hint)
    end_index = response.find("Short-form hint:")

    # Extract and strip any leading/trailing whitespace
    long_form_hint = response[start_index:end_index].strip()

    start_index = response.find("Short-form hint:") + len("Short-form hint:")
    short_form_hint = response[start_index:].strip()
    return long_form_hint, short_form_hint


student_template = """
{student_code}

{long_form_hint}
"""

student_fine_tune = """
You are a novice computer science student, and you are working on a Python programming assignment.
Your teacher is going to give you your code, and a hint to help you fix it.
You must listen to instructions from your teacher and apply them to your code.
Once you have applied the hint to your code, you must output only the corrected code. You are not allowed to change the code in any way except to apply the hint. You must use the hint as is.
Even if the new code will not run, or is still incorrect, you must only output the code.
You are not allowed to add comments to the code.
Your teacher will give you the code and hint like so:
Only output the code. You are only allowed to output the Python code.

STUDENT CODE HERE

HINT HERE


Example:

def add(a, b):
    return a - b

Operators in Python are used to perform operations on variables and values. The `+` operator is used to add two values together, while the `-` operator is used to subtract one value from another. You should replace the `-` operator with the `+` operator to correctly add the two values together.

Response:
def add(a, b):
    return a + b
"""

teacher_template = """
Problem Description:
{problem_description}
Student Code:
{student_code}
Edit:
{edit}
"""

teacher_fine_tune = """
You are a programming teacher, and you are teaching a novice computer science student to program.
You will be given the problem description, student code and an edit to make to the code.
You are tasked with writing a long-form hint, one paragraph at most, that will help the student understand the edit and how to use it in their code. The hint should be written in a way that is easy to understand for a novice programmer, but doesn't give away the answer, it is a hint after all. Do not fix the code for the student, only provide a hint.
You should then write a short-form hint, one sentence at most, that will help the student understand the edit and how to use it in their code.
Your output should be the long-form hint followed by the short-form hint like so:
Long-form hint:
LONG HINT HERE
Short-form hint:
SHORT HINT HERE

Example Input:
Problem Description:
Write a function called `add` that takes two arguments, `a` and `b`, and returns the sum of `a` and `b` to learn how to use operators.
Student Code:
def add(a, b):
    return a - b
Edit:
At line 2, column 12 replace '-' with '+'

Example Response:
Long-form hint:
Operators in Python are used to perform operations on variables and values. The `+` operator is used to add two values together, while the `-` operator is used to subtract one value from another. You should replace the `-` operator with the `+` operator to correctly add the two values together.
Short-form hint:
Make sure you are using the correct operator to add the two values together.
"""
