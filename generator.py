import logging
import os
from typing import Tuple

from dotenv import load_dotenv
from openai import OpenAI

from compare import validate_student_attempts

teacher_attempt_count = 0
max_teacher_attempts = 3


def generate_ai_hint(problem_description: str, student_code: str, edit: str, goal_code: str) -> str:
    load_dotenv()
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    if client is None:
        raise Exception("OpenAI client not initialized.")
    return internal_generate_ai_hint(problem_description, student_code, edit, goal_code, client)


def internal_generate_ai_hint(problem_description: str, student_code: str, edit: str, goal_code: str,
                              client: OpenAI) -> str:
    global teacher_attempt_count
    global max_teacher_attempts
    if teacher_attempt_count > max_teacher_attempts:
        raise Exception("Too many attempts to generate a hint, stopping.")
    teacher_attempt_count += 1
    filled_template = populate_teacher_template(problem_description, student_code, edit)

    teacher_interaction = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "user", "content": f"{filled_template}"},
        ],
    )
    hints = extract_hints(teacher_interaction.choices[0].message.content)
    if hints is None:
        raise Exception("No hints were generated by the AI.")
    long_form_hint, short_form_hint = hints
    # Log the hints
    logging.log(logging.INFO, f"Long-form hint: {long_form_hint}")
    logging.log(logging.INFO, f"Short-form hint: {short_form_hint}")

    filled_student_template = populate_student_template(long_form_hint, student_code)
    completions = []
    for _ in range(10):
        completion_student = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": f"{filled_student_template}"},
            ],
        )
        completions.append(completion_student.choices[0].message.content)
    logging.log(logging.INFO, f"Student completions: {completions}")
    # Now to compare the completions to the goal code.
    average_score = validate_student_attempts(completions, goal_code, student_code)
    # We want a solution that is at least 85% similar to the goal code.
    if average_score < 0.85:
        # We will handle the recursive attempt here.
        return internal_generate_ai_hint(problem_description, student_code, edit, goal_code, client)
    return short_form_hint


def populate_teacher_template(problem_description, student_code, edit):
    global teacher_template
    filled_template = teacher_template.format(
        problem_description=problem_description,
        student_code=student_code,
        edit=edit,
    )
    return filled_template


def populate_student_template(long_form_hint, student_code):
    global student_template
    filled_student_template = student_template.format(
        student_code=student_code,
        long_form_hint=long_form_hint,
    )
    return filled_student_template


def extract_hints(response: str) -> Tuple[str, str]:
    # Find the start of the long-form hint
    start_index = response.find("Long-form hint:") + len("Long-form hint:")

    # Find the start of the short-form hint (which marks the end of the long-form hint)
    end_index = response.find("Short-form hint:")

    # Extract and strip any leading/trailing whitespace
    long_form_hint = response[start_index:end_index].strip()

    start_index = response.find("Short-form hint:") + len("Short-form hint:")
    short_form_hint = response[start_index:].strip()
    return long_form_hint, short_form_hint


student_template = """You are a novice computer science student, and you are working on a programming assignment. You've written the following code:
{student_code}
You are stuck on a part of the code, and you need help, your teacher has given you the following long-form hint:
{long_form_hint}
Your job is to apply the hint to your code and write the corrected code. You are not allowed to change the code in any way except to apply the hint, you must use the hint as is.
You must output only the corrected code, even if it would not run as is, or is still incorrect. You must output the code exactly as it would be written by the student, with the hint applied.
You are not allowed to add comments to the code.
"""

teacher_template = """You are a programming teacher, and you are teaching a novice computer science student to program. You've given them the following assignment to complete:
{problem_description}
The student has written the following code:
{student_code}
A person helping the student has given them an edit that they believe will fix the code but does not know how to tell the student to use the edit. The edit is as follows:
{edit}
You are tasked with writing a long-form hint, one paragraph at most, that will help the student understand the edit and how to use it in their code. The hint should be written in a way that is easy to understand for a novice programmer, but doesn't give away the answer, it is a hint after all. Do not fix the code for the student, only provide a hint.
You should then write a short-form hint, one sentence at most, that will help the student understand the edit and how to use it in their code.
Your output should be the long-form hint followed by the short-form hint like so:
Long-form hint:
LONG HINT HERE
Short-form hint:
SHORT HINT HERE
"""
